Banco de dados :: Propicia forma estruturada de guardar e acessar dados
MongoDB é um banco de dados NoSQL baseado em documentos
Um documento é uma forma estruturada de organizar os dados em um conjunto de campos-valores
Uma coleção é a estrutura de documentos organizados no MongoDB. Geralmente, os documentos possuem a mesma estrutura campos-valores

Atlas :: Serviço em nuvem do MongoDB. Há o Atlas free tier que é gratuito, disponibiliza 512MB e três servidores (chamados réplicas)
Passos para criação de um cluster no Atlas free tier
	1) Criar uma organização
	2) Criar um projeto dentro da organização
	3) Criar um cluster dentro do projeto
	4) Criar uma conexão :: "conectar de qualquer lugar" para ambiente de desenvolvimento
	5) Criar um usuário :: login: m001-student; senha: m001-mongodb-basics 
Para conectar, seguir os seguintes passos:
	1) Clicar no botão "connect" no Atlas
	2) Indicar que possui o mongo shell instalado e copiar o endereço para a linha de comando linux
		Ex.: mongo "mongodb+srv://sandbox.bteig.mongodb.net/myFirstDatabase" --username m001-student
		mongo "mongodb+srv://sandbox.bteig.mongodb.net" --username m001-student
	3) Informar usuário e senha
	4) Uma outra forma de conexão seria: mongodb+srv://usuario:senha@URI_cluster_atlas.mongodb.net/[nome_base_dados] (entre [] é parâmetro opcional)
		Ex.: mongo "mongodb+srv://m001-student:m001-mongodb-basics@sandbox.bteig.mongodb.net"
			  mongo "mongodb+srv://m001-student:m001-mongodb-basics@sandbox.bteig.mongodb.net/sample_supplies"
	
No MongoDB, os dados são armazenados no formato BSON, a representação binária do formato JSON, que propicia otimização em termos de uso de espaço em disco, velocidade de leitura e flexibilidade. O intuito é melhorar a performance que seria muito prejudicada com se o formato JSON fosse usado diretamente.
	:: Aquilo que pode ser representado por um JSON pode ser armazenado nativamente no MongoDB
	:: JSON (JavaScript Object Notation) -> padrão para intercâmbio de dados na web
	:: O formato BSON permite o uso de tipos de dados não suportados no formato JSON como os tipos de dados data e binários

SELECT * FROM ATENDIMENTOPUBLICO.REGISTRO_ATENDIMENTO WHERE RGAT_ID = 56144606;
SELECT cbdo_id FROM ATENDIMENTOPUBLICO.ORDEM_SERVICO WHERE RGAT_ID = 56144606;

Importanto e exportando dados
	:: Utilizando BSON -> mongodump e mongorestore
	:: Utilizando JSON -> mongoexport (equivalente JSON ao mongodump) e mongoimport (equivalente JSON ao mongorestore)
	:: Exportação de dados, ou seja, transferência do banco de dados para uma outra plataforma
		:: Utilizando BSON :: mongodump --uri "<uri do cluster Atlas>/nome_base_dados"
			Ex.: mongodump --uri "mongodb+srv://m001-student:m001-mongodb-basics@sandbox.bteig.mongodb.net/sample_supplies"
		:: Utilizando JSON :: mongoexport --uri "<uri do cluster Atlas>/nome_base_dados" --collection=<nome da coleção> --out <nome do arquivo>.json
			Ex.: mongoexport --uri "mongodb+srv://m001-student:m001-mongodb-basics@sandbox.bteig.mongodb.net/sample_supplies" --collection=sales --out=m001_sale.json
	:: Importação de dados
		:: Utilizando BSON :: mongorestore --uri "<uri do cluster Atlas>/nome_base_dados" --drop dump
		:: Utilizando JSON :: mongoimport --uri "<uri do cluster Atlas>/nome_base_dados" --drop <nome do arquivo>.json 
	:: Documentação sobre importação e exportação: https://docs.mongodb.com/database-tools
	
	mongodump --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"

mongoexport --uri="mongodb+srv://m001-student:m001-mongodb-basics@sandbox.bteig.mongodb.net/sample_supplies" --collection=sales --out=sales.json

mongorestore --uri "mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies"  --drop dump

mongoimport --uri="mongodb+srv://<your username>:<your password>@<your cluster>.mongodb.net/sample_supplies" --drop sales.json

	
Comandos básicos
	:: show dbs
	:: use <nome_base_dados>
	:: show collections
	:: db.<nome_coleção>.find({"campo": "valor"})
		:: db.<nome_coleção>.find({"campo": "valor"}).count()
		:: db.<nome_coleção>.find({"campo": "valor"}).pretty()
			Ex.: db.sample_training.trips.find({"birth year": 1961, "start station name": "Howard St & Centre St"}).pretty()
	:: find() retorna um cursor que aponta para as próximos 20 documentos. Para iterar sobre os próximos, usa-se o camando it no mongoshell
	:: Sobre os operadores de consulta: https://docs.mongodb.com/manual/reference/operator/query/
	:: db.<nome_coleção>.findOne()
		:: Útil para avaliar a estrutura de um documento
	
Sobre o tipo ObjectId() que é o tipo de dado dos campos _id presente em todos os documentos do MongoDB

Comandos básicos - CRUD
	:: Manual Mongodb: https://docs.mongodb.com/manual/tutorial/query-documents/
	:: db.<nome_coleção>.insert({JSON})
	:: db.<nome_coleção>.insert([{JSON_1}, {JSON_2},..., {JSON_X}])
	:: db.<nome_coleção>.insert([{JSON_1}, {JSON_2},..., {JSON_X}], { "ordered": false })
	:: db.<nome_coleção>.updateOne({query}, {<operator1>: { <field1>: <value1>, ... }, <operator2>: { <field2>: <value2>, ... }, ...})
		:: Atualiza apenas uma ocorrência que satisfaça ao critério de pesquisa
		:: Ex.: db.grades.updateOne( {"student_id": 250, "class_id": 339}, {"$push" :  {"scores" : {"type": "extra_credit", "score": 100}} })
	:: db.<nome_coleção>.updateMany({query}, {<operator1>: { <field1>: <value1>, ... }, <operator2>: { <field2>: <value2>, ... }, ...})
		:: Atualiza todas as ocorrências que satisfaçam ao critério de pesquisa
		:: Ex.: db.zips.updateMany({"city" : "HUDSON"}, {"$inc" : {"pop" : 10}})
		:: Ex.: db.zips.updateMany({"zip" : "12534"}, {"$set" : {"pop" : 17630}})
	:: Operadores MQL: https://docs.mongodb.com/manual/reference/operator/update/#id1
	
Validação de esquema
	:: É possível promover a validação do esquema nas inclusões e nas atualizações -> https://docs.mongodb.com/manual/core/schema-validation/index.html#schema-validation
	
#############################################################################################################################

Inserting New Documents - insert() and errors:

1. Get a random document from a collection
2. Copy this random document, and insert it back to the collection. Do you get
   a "Duplicate Key" error?
3. Insert that document into the collection without the _id field to get a
   successfull insert. Did it work?


Inserting New Documents - insert() order:

1. Insert three test documents into the inspections collection
   db.inspections.insert([{"test":1},{"test":2},{"test":3}])
2. Insert the same three documents into the inspections collection. Did it
   work? Why?
3. Insert these three test documents into the inspections collection. Did it
   work? Why?
   db.inspections.insert([{"_id": 1, "test": 1},{"_id": 1, "test": 2},{"_id": 3,"test": 3}])
4. Try the same insert as above but make it unordered.
5. Try this command. Did it work? Why?
   db.inspection.insert([{ "_id":1, "test": 1 },{ "_id": 3,"test": 3 }])


Updating Documents  - mongo shell

1. Find all documents in the zips collection where the zip field is equal to
   "12434".
2. Find all documents in the zips collection where the city field is equal to
   "HUDSON".
3. Find how many documents in the zips collection have the zip field is equal
   to "HUDSON".
4. Update all documents in the zips collection where the city field is equal
   to "HUDSON" by adding 10 to the current value of the "pop" field.
5. Update a single document in the zips collection where the zips field is
   equal to "12534" by setting the value of the "pop" field to 17630.
6. Update a single document in the zips collection where the zips field is
   equal to "12534" by setting the value of the "population" field to 17630.
7. Find all documents in the grades collection where the student_id is 151,
   and the class_id field is 399.
8. Find all documents in the grades collection where the student_id is 250,
   and the class_id field is 399.
9. Update one document in the grades collection where the student_id is 250,
   and the class_id field is 399, by adding a document element to the "scores"
   array.

Practice Question:

People often confuse New York City as the capital of New York state, when in
reality the capital of New York state is Albany.

Add a boolean field "capital?" to all documents pertaining to Albany NY, and
New York, NY. The value of the field should be true for all Albany documents
and false for all New York documents.


Deleting Documents and Collections

1. Look at all the documents in the inspections collection that have test field
   equal to 1.
2. Look at all the documents in the inspections collection that have test field
   equal to 3.
3. Delete all the documents from the inspections collection that have test
   field equal to 1
4. Delete one document from the inspections collection that has test field
   equal to 3
5. Inspect what is left of the inspection collection.
6. View what collections are present in the sample_training collection.
7. Drop the inspection collection





































