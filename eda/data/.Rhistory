udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
exemplo <- sample(0:1, 20, replace = TRUE)
# Variáveis fatoriais
set.seed(160)
exemplo <- sample(0:1, 20, replace = TRUE)
is.factor(exemplo)
is.numeric(exemplo)
exemplo <- factor(exemplo, labels = c("private", "public"))
exemplo <- sample(0:1, 20, replace = TRUE)
is.factor(exemplo)
is.numeric(exemplo)
exemplo.f <- factor(exemplo, labels = c("private", "public"))
exemplo.f
levels
Levels
levels(exemplo.f)
is.factor(exemplo.f)
is.factor(exemplo)
statusSocial <- c("low", "middle", "low", "low", "low", "low", "middle", "low", "middle",
"middle", "middle", "middle", "middle", "high", "high", "low", "middle",
"middle", "low", "high")
is.factor(statusSocial)
is.character(statusSocial)
statusSocial.niveis <- factor(statusSocial, levels("low", "middle", "high"))
statusSocial.f.niveis <- factor(statusSocial, levels("low", "middle", "high"))
statusSocial.niveis <- factor(statusSocial, levels= c("low", "middle", "high"))
levels(statusSocial.niveis)
statusSocial.ordenado <- order(statusSocial, levels= c("low", "middle", "high"))
statusSocial.ordenado <- ordered(statusSocial, levels= c("low", "middle", "high"))
statusSocial.ordenado
is.factor(statusSocial.ordenado)
statusSocial.ordenado <- ordered(statusSocial, levels= c(levels(statusSocial.ordenado) , "very.high"))
statusSocial.ordenado[21] <- "very.high"
statusSocial.ordenado
?cars
?cars
str(cars)
plot(cars)
plot(cars)
summary(mtcars)
efficient <- mtcars[mtcars$mpg >= 23,]
View(efficient)
efficient <- mtcars[mtcars$mpg > 23,]
efficient <- mtcars[mtcars$mpg >= 23,]
efficient
data(mtcars)
dim(mtcars)
dim(efficient)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
getwd()
setwd('/home/seabra/dev/dsjourney/EDA/lesson3')
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
View(pf)
View(pf)
names(pf)
library(ggplot2)
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks=1:31)
qplot(x = dob_day, data = pf)
?rep
library(reshape2)
rs <- library(reshape2)
summary(rs)
head(tips)
summary(tips)
str(tips)
library(ggplot2)
summary(tips)
scatterPlot <- ggplot(tips, aes(x = tips$total_bill, y = tips/total_bill) + geom_point(shape = 1))
scatterPlot <- ggplot(tips, aes(x = tips$total_bill, y = tips/total_bill)) + geom_point(shape = 1)
scatterPlot
scatterPlot <- ggplot(tips, aes(x = total_bill, y = tips/total_bill)) + geom_point(shape = 1)
scatterPlot
library(ggplot2)
scatterPlot <- ggplot(tips, aes(x = total_bill, y = tips/total_bill)) + geom_point(shape = 1)
scatterPlot
library(ggplot2)
sp <- ggplot(tips, aes(x=total_bill, y=tip/total_bill)) + geom_point(shape=1)
sp
sp + facet_grid(sex ~ .)
sp + facet_grid(. ~ sex)
sp + facet_grid(sex ~ day)
sp + facet_wrap(. ~ day, ncol = 2)
library(ggplot2)
ggplot(aes(x = gender, y = friend_count), data = subset(pf, !is.na(gender))) +
geom_boxplot()
ggplot(aes(x = gender, y = friend_count), data = subset(pf, !is.na(gender))) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000))
ggplot(aes(x = gender, y = friend_count), data = subset(pf, !is.na(gender))) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 1000))
ggplot(aes(x = gender, y = friend_count), data = subset(pf, !is.na(gender))) +
geom_boxplot() +
coord_cartesian(ylim = c(0, 250))
by(pf$friend_count, pf$gender, summary)
data("diamonds")
dm <- data("diamonds")
data("diamonds")
dmd <- data("diamonds")
str(dmd)
library(ggplot2)
dm <- diamonds
View(dm)
View(dm)
summary(dm)
str(dm)
str(dm$color)
levels(dm$color)
?diamonds
ggplot(aes(x = price), data = dm) +
geom_histogram()
summary(dm$price)
# Geração de histogramas
# Importante: analisar os parâmetros aes, coord_cartesian, scale_x_continuous, scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem')
library(ggplot2)
dm <- diamonds
# Geração de histogramas
# Importante: analisar os parâmetros aes, coord_cartesian, scale_x_continuous, scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem')
hist_1 <- ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem')
ggsave('/home/seabra/dev/dsjourney/eda/data/Histograma.png', hist_1)
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
scale_x_log10() +
xlab('Preço dos diamantes') +
ylab('Contagem')
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10()
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 50, color = 'black', fill = '#F79420') +
scale_x_log10()
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.5, color = 'black', fill = '#F79420') +
scale_x_log10()
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.25, color = 'black', fill = '#F79420') +
scale_x_log10()
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.05, color = 'black', fill = '#F79420') +
scale_x_log10()
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.025, color = 'black', fill = '#F79420') +
scale_x_log10()
summary(log10(dm$price + 1))
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.025, color = 'black', fill = '#F79420') +
scale_x_log10()
ggsave('/home/seabra/dev/dsjourney/eda/data/Histograma_Log.png')
# Avaliar o uso recomendado de scale_x_sqrt
summary(sqrt(dm$price))
# Avaliar o uso recomendado de scale_x_sqrt
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 10, color = 'black', fill = '#F79420') +
scale_x_sqrt()
# Avaliar o uso recomendado de scale_x_sqrt
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 1, color = 'black', fill = '#F79420') +
scale_x_sqrt()
# Avaliar o uso recomendado de scale_x_sqrt
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 2, color = 'black', fill = '#F79420') +
scale_x_sqrt()
ggsave('/home/seabra/dev/dsjourney/eda/data/Histograma_sqtr.png')
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem')
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.025, color = 'black', fill = '#F79420') +
scale_x_log10()
summary(log10(dm$price + 1))
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.025, color = 'black', fill = '#F79420') +
scale_x_log10(breaks = seq(300, 250, 18000))
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.025, color = 'black', fill = '#F79420') +
scale_x_log10()
# Geração de histogramas
# Importante: analisar os parâmetros aes, coord_cartesian, scale_x_continuous, scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem')
# Utilização do faceting
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem') +
facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
library(qpplot)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
library(ggplot2)
# Utilização do faceting
qplot(x = price, data = diamonds) + facet_wrap(~cut)
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem') +
facet_wrap(~cut)
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem') +
facet_wrap(~cut, scales = "free_y")
library(ggplot2)
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 85, color = 'black', fill = '#F79420') +
coord_cartesian(xlim = c(0, 20000)) +
xlab('Preço dos diamantes') +
ylab('Contagem') +
facet_wrap(~cut, scales = "free_y")
# Avaliar o uso recomendado de scale_x_log10
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.025, color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(aes(x = price), data = dm) +
geom_histogram(binwidth = 0.025, color = 'black', fill = '#F79420') +
scale_x_log10() +
xlab('Preço dos diamantes') +
ylab('Contagem') +
facet_wrap(~cut, scales = "free_y")
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price)) +
geom_boxplot()
library(ggplot2)
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price)) +
geom_boxplot()
dm <- diamonds
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price)) +
geom_boxplot()
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price), data = dm) +
geom_boxplot()
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Cor') +
ylab('Preço') +
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Cor') +
ylab('Preço')
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price), data = dm) +
geom_boxplot()
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Cor')
# Boxplots para variáveis categóricas
ggplot(aes(x = dm$color, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Cor') +
ylab('Preço')
ggplot(aes(x = dm$cutr, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Cor') +
ylab('Preço')
ggplot(aes(x = dm$cut, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Cor') +
ylab('Preço')
ggplot(aes(x = dm$clarity, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Brilho') +
ylab('Preço')
# Boxplots para variáveis categóricas :: As variáveis categóricas ficam no eixo x
# enquanto as variáveis contínuas, no eixo y
ggplot(aes(x = dm$color, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Cor') +
ylab('Preço')
ggplot(aes(x = dm$color, y = dm$price), data = dm) +
geom_boxplot() +
scale_y_continuous(breaks = seq(0, 20000, 1000)) +
xlab('Cor') +
ylab('Preço')
by(dm$price, dm$color, summary)
levels(dm$color)
IQR(subset(dm, dm$color = 'D')$price)
IQR(subset(dm, dm$color == 'D')$price)
IQR(subset(dm, dm$color == 'J')$price)
ggplot(aes(x = dm$carat, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Brilho') +
ylab('Preço')
ggplot(aes(x = dm$carat, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Brilho') +
ylab('Preço')
library(ggplot2)
ggplot(aes(x = dm$carat, y = dm$price), data = dm) +
geom_boxplot() +
xlab('Brilho') +
ylab('Preço')
summary(dm)
str(dm)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
setwd('/home/seabra/dev/dsjourney/eda/data')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
ggplot(aes(x = gender, y = friend_count), data = subset(pf, !is.na(gender))) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 1000))
str(dm)
ggplot(aes(x = dm$color, y = dm$price/dm$carat), data = subset(dm, dm$carat != 0)) +
geom_boxplot() +
xlab('Cor') +
ylab('Preço por quilate')
ggsave('/home/seabra/dev/dsjourney/eda/data/Boxplot_Cor_Preco_por_Quilate.png')
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = subset(dm, dm$carat != 0)) +
geom_freqpoly(binwidth=10)
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = subset(dm, dm$carat != 0)) +
geom_freqpoly(aes(color = color), binwidth=10)
# Polígono de frequencia
ggplot(aes(x = friend_count), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Variável - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = subset(dm, dm$carat != 0)) +
geom_freqpoly(aes(color = color), binwidth=10) +
scale_x_continuous()
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(aes(color = color), binwidth=10) +
scale_x_continuous()
dms <- subset(dm, dm$carat < 0)
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(aes(color = color), binwidth=0.2) +
scale_x_continuous()
str(dm)
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(aes(color = color), binwidth=0.1) +
scale_x_continuous()
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous()
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous() +
scale_y_continuous(breaks = seq(0, 12000, 500))
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous() +
scale_y_continuous(breaks = seq(0, 12000, 1000))
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous(breaks = seq(0, 7, 0.25)) +
scale_y_continuous(breaks = seq(0, 12000, 1000))
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous(breaks = seq(0, 7, 0.1)) +
scale_y_continuous(breaks = seq(0, 12000, 1000))
library(dplyr)
library(EDAWR)
install.packages("devtools")
library(EDAWR)
devtools::install_github("rstudio/EDAWR")
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous(breaks = seq(0, 7, 0.05)) +
scale_y_continuous(breaks = seq(0, 12000, 1000))
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(binwidth=0.05) +
scale_x_continuous(breaks = seq(0, 7, 0.1)) +
scale_y_continuous(breaks = seq(0, 12000, 1000))
# Polígono de frequencia
ggplot(aes(x = dm$carat), data = dm) +
geom_freqpoly(binwidth=0.1) +
scale_x_continuous(breaks = seq(0, 7, 0.1)) +
scale_y_continuous(breaks = seq(0, 12000, 1000))
