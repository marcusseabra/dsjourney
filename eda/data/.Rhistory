udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
exemplo <- sample(0:1, 20, replace = TRUE)
# Variáveis fatoriais
set.seed(160)
exemplo <- sample(0:1, 20, replace = TRUE)
is.factor(exemplo)
is.numeric(exemplo)
exemplo <- factor(exemplo, labels = c("private", "public"))
exemplo <- sample(0:1, 20, replace = TRUE)
is.factor(exemplo)
is.numeric(exemplo)
exemplo.f <- factor(exemplo, labels = c("private", "public"))
exemplo.f
levels
Levels
levels(exemplo.f)
is.factor(exemplo.f)
is.factor(exemplo)
statusSocial <- c("low", "middle", "low", "low", "low", "low", "middle", "low", "middle",
"middle", "middle", "middle", "middle", "high", "high", "low", "middle",
"middle", "low", "high")
is.factor(statusSocial)
is.character(statusSocial)
statusSocial.niveis <- factor(statusSocial, levels("low", "middle", "high"))
statusSocial.f.niveis <- factor(statusSocial, levels("low", "middle", "high"))
statusSocial.niveis <- factor(statusSocial, levels= c("low", "middle", "high"))
levels(statusSocial.niveis)
statusSocial.ordenado <- order(statusSocial, levels= c("low", "middle", "high"))
statusSocial.ordenado <- ordered(statusSocial, levels= c("low", "middle", "high"))
statusSocial.ordenado
is.factor(statusSocial.ordenado)
statusSocial.ordenado <- ordered(statusSocial, levels= c(levels(statusSocial.ordenado) , "very.high"))
statusSocial.ordenado[21] <- "very.high"
statusSocial.ordenado
?cars
?cars
str(cars)
plot(cars)
plot(cars)
summary(mtcars)
efficient <- mtcars[mtcars$mpg >= 23,]
View(efficient)
efficient <- mtcars[mtcars$mpg > 23,]
efficient <- mtcars[mtcars$mpg >= 23,]
efficient
data(mtcars)
dim(mtcars)
dim(efficient)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
getwd()
setwd('/home/seabra/dev/dsjourney/EDA/lesson3')
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
View(pf)
View(pf)
names(pf)
library(ggplot2)
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks=1:31)
qplot(x = dob_day, data = pf)
?rep
library(reshape2)
rs <- library(reshape2)
summary(rs)
head(tips)
summary(tips)
str(tips)
library(ggplot2)
summary(tips)
scatterPlot <- ggplot(tips, aes(x = tips$total_bill, y = tips/total_bill) + geom_point(shape = 1))
scatterPlot <- ggplot(tips, aes(x = tips$total_bill, y = tips/total_bill)) + geom_point(shape = 1)
scatterPlot
scatterPlot <- ggplot(tips, aes(x = total_bill, y = tips/total_bill)) + geom_point(shape = 1)
scatterPlot
library(ggplot2)
scatterPlot <- ggplot(tips, aes(x = total_bill, y = tips/total_bill)) + geom_point(shape = 1)
scatterPlot
library(ggplot2)
sp <- ggplot(tips, aes(x=total_bill, y=tip/total_bill)) + geom_point(shape=1)
sp
sp + facet_grid(sex ~ .)
sp + facet_grid(. ~ sex)
sp + facet_grid(sex ~ day)
sp + facet_wrap(. ~ day, ncol = 2)
install.packages("gridExtra")
str(pf)
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420')
library(ggplot2)
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420')
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(0, 5000, 200))
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(0, 5000, 500))
summary(pf$friend_count)
summary(log10(pf$friend_count + 1))
summary(sqrt(pf$friend_count))
grf_1 = ggplot(aes(x = log10(pf$friend_count + 1)), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10(breaks = seq(0, 5, .5))
ggplot(aes(x = log10(pf$friend_count + 1)), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10(breaks = seq(0, 5, .5))
grf_1 = ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(0, 5000, 500))
grf_2 = ggplot(aes(x = log10(pf$friend_count + 1)), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10(breaks = seq(0, 5, .5))
ggplot(aes(x = sqrt(pf$friend_count)), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_sqrt(breaks = seq(0, 75, 10))
ggplot(aes(x = sqrt(pf$friend_count)), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_sqrt(breaks = seq(0, 75, 5))
grf_3 = ggplot(aes(x = sqrt(pf$friend_count)), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_sqrt(breaks = seq(0, 75, 5))
grid.arrange(grf_1, grf_2, grf_3, ncol=1)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(grf_1, grf_2, grf_3, ncol=1)
grf_1 = ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420')
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420')
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10()
grf_2 = ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_sqrt()
grf_3 = ggplot(aes(x = friend_count), data = pf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_sqrt()
grid.arrange(grf_1, grf_2, grf_3, ncol=1)
setwd('/home/seabra/dev/dsjourney/eda/data')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
# Histograma
ggplot(aes(x = friend_count), data = subset(pf, !is.na(gender))) +
geom_histogram() +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
# Histograma
ggplot(aes(x = friend_count), data = subset(pf, !is.na(gender))) +
geom_histogram() +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 20)) +
facet_wrap(~gender)
# Histograma
ggplot(aes(x = friend_count), data = subset(pf, !is.na(gender))) +
geom_histogram() +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 200)) +
facet_wrap(~gender)
# Polígono de frequencia
ggplot(aes(x = friend_count), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Contagem de amigos - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Polígono de frequencia
ggplot(aes(x = friend_count), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Variável - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
ggplot(aes(x = friend_count, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Variável - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# No eixo y pode-se usar uma notação que retorne proporções no lugar de contagem
ggplot(aes(x = friend_count, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Variável - friend_count') +
ylab('Proporção com usuários')
View(pf)
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
summary(pf$www_likes)
sd(pf$www_likes)
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, 10)) +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 75), breaks = seq(0, 750, 10)) +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 75), breaks = seq(0, 75, 10)) +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 40), breaks = seq(0, 40, 5)) +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 40), breaks = seq(0, 40, 5)) +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 40), breaks = seq(0, 40, 5)) +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 20), breaks = seq(0, 20, 5)) +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous() +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous() +
scale_x_log10()
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_log10()
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender)) +
scale_x_log10()
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender)) +
scale_x_continuous()
# Use um polígono de frequência para determinar qual gênero dá mais curtidas na world wide web
ggplot(aes(x = www_likes), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender)) +
scale_x_continuous() +
scale_x_log10() +
xlab('Curtidas - friend_count') +
ylab('Percentual de usuários com a contagem de amigos')
by(pf$www_likes, pf$gender, sum)
